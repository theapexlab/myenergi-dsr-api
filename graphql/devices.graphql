#  FYI:  After changing anything here run yarn codegen to generate new types

# query Devices($adminGroupId: Int!, $limit: Int, $offset: Int) {
#    adminGroup: admin_group_by_pk(id: $adminGroupId) {
#      devices: admin_group_devices {
#       ...DeviceData
#     }
#   }
# }

query Device($adminGroupId: Int!, $serialNo: Int!) {
   adminGroup: admin_group_by_pk(id: $adminGroupId) {
    devices: admin_group_devices(where: {serialno: {_eq: $serialNo}}) {
      ...DeviceData
    }
  }
}

query DeviceStatus($serialNo: bigint!) {
  zappi: zappi_by_pk(serialno: $serialNo) {
    ...ZappiStatus
  }
  eddi: eddi_by_pk(serialno: $serialNo) {
    ...EddiStatus
  }
}

query NewDevicesBySerialNos($serialNos: [bigint!]) {
  zappis: zappi(where: { serialno: { _in: $serialNos } }) {
    serialNo: serialno
  }
  eddis: eddi(where: { serialno: { _in: $serialNos } }) {
    serialNo: serialno
  }
}

query DeviceControlGroup($adminGroupId: Int!, $serialNo: Int!) {
    adminGroup: admin_group_by_pk(id: $adminGroupId) {
      controlGroups: control_groups {
        devices(where: {serialno: {_eq: $serialNo}}) {
            controlGroup: control_group {
              ...ControlGroupFields
            }
        }
      }
  }
}

fragment DeviceData on admin_group_device {
  serialNo: serialno
  deviceClass: device_type
}

fragment ZappiData on zappi {
  serialNo: serialno
  deviceClass: deviceclass
  productCode: productcode
}

fragment EddiData on eddi {
  serialNo: serialno
  deviceClass: deviceclass
  productCode: productcode
}

fragment ZappiStatus on zappi {
  serialNo: serialno
  deviceClass: deviceclass
  updateDate: updatedat
  chargeEnergy: chargeenergy
  voltage
  frequency
}

fragment EddiStatus on eddi {
  serialNo: serialno
  deviceClass: deviceclass
  updateDate: updatedat
  chargeEnergy: chargeenergy
  voltage
  frequency
}
