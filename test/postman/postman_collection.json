{
	"info": {
		"_postman_id": "6ef42e88-bea0-45e5-86ba-22ed89f4b4cb",
		"name": "MyEnergi end2end testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api-success",
			"item": [
				{
					"name": "control-groups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "control Group Devices query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testZappiSNO = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"",
													"pm.test(\"Verify serialNo is in response\", () => {",
													"    pm.expect(responseJson.some(item => item.serialNo === testZappiSNO && item.deviceClass ==='Zappi'), 'serialno not in array').to.be.true;",
													"})",
													"",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys('serialNo','deviceClass', 'postalCode')",
													"  });",
													"})",
													"",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].deviceClass).to.be.a(\"string\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"devices"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"devices"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "control Group Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const testZappiSNO = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys('serialNo','voltage','frequency','deviceClass','chargeEnergy', 'updateDate','isAvailable')",
													"  });",
													"})",
													"",
													"",
													"pm.test(\"Response have correct device\", () => {",
													"    pm.expect(responseJson.some(item => item.serialNo === testZappiSNO ",
													"    && item.deviceClass ==='Zappi'",
													"    && item.frequency ===4999",
													"    && item.chargeEnergy ===0",
													"    && item.isAvailable ===true",
													"    ), 'device not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].deviceClass).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].frequency).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].chargeEnergy).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].isAvailable).to.be.a(\"boolean\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"status"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "control Group History query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testZappiSNO = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"",
													"pm.test(\"Verify serialNo is in response\", () => {",
													"    pm.expect(responseJson.some(item => item.serialNo === testZappiSNO), 'serialno not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"serialNo\",",
													"        \"importPower\",",
													"        \"exportPower\",",
													"        \"externalCtPositivePower1\",",
													"        \"externalCtPositivePower2\",",
													"        \"externalCtPositivePower3\",",
													"        \"externalCtNegativePower1\",",
													"        \"externalCtNegativePower2\",",
													"        \"externalCtNegativePower3\",",
													"        \"divertedLoadPower1\",",
													"        \"divertedLoadPower2\",",
													"        \"divertedLoadPower3\",",
													"        \"boostLoadPower1\",",
													"        \"boostLoadPower2\",",
													"        \"boostLoadPower3\",",
													"        \"voltage1\",",
													"        \"voltage2\",",
													"        \"voltage3\",",
													"        \"frequency\",",
													"        \"timestamp\")",
													"  });",
													"",
													"",
													"})",
													"",
													"pm.test(\"Response have correct device\", () => {",
													"    pm.expect(responseJson.some(item => ",
													"    item.serialNo === testZappiSNO ",
													"    && item.exportPower ===0",
													"    && item.frequency ===5001",
													"    && item.voltage1 ===2323",
													"    && item.voltage3 ===2328",
													"    ), 'device not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].importPower).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].voltage1).to.be.a(\"number\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"type": "text"
												},
												{
													"key": "startDate",
													"value": "2017-01-01T00:00:00.000Z",
													"type": "text",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2022-05-01T00:00:00.000Z",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/history?startDate={{startDate}}&endDate={{endDate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"history"
											],
											"query": [
												{
													"key": "startDate",
													"value": "{{startDate}}"
												},
												{
													"key": "endDate",
													"value": "{{endDate}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"history"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "add Device To Control Group mutation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"mutation had correct rows affected\", () => {",
													"  const responseJson = pm.response.json();",
													"",
													"  pm.expect(responseJson.affectedRows).to.eq(2);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"object\");",
													"  pm.expect(responseJson.affectedRows).to.be.a(\"number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{testControlGroupId2}},\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"add-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 1,\n  \"serialNos\": [\n    111111,\n    222222\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"add-device"
													],
													"variable": [
														{
															"key": "id",
															"value": null
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
										}
									]
								},
								{
									"name": "remove Device From Control Group mutation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"mutation had correct rows affected\", () => {",
													"  const responseJson = pm.response.json();",
													"",
													"  pm.expect(responseJson.affectedRows).to.eq(2);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"object\");",
													"  pm.expect(responseJson.affectedRows).to.be.a(\"number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{testControlGroupId2}},\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/remove-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"remove-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 1,\n  \"serialNos\": [\n    111111,\n    222222\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/remove-device",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"remove-device"
													],
													"variable": [
														{
															"key": "id",
															"value": null
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
										}
									]
								},
								{
									"name": "control Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testControlGroupId1 = parseInt(pm.variables.get(\"testControlGroupId1\"));",
													"  const testControlGroupName1 = pm.variables.get(\"testControlGroupName1\");",
													"",
													"pm.test(\"Response have correct control group\", () => {",
													"  pm.expect(responseJson.id).to.eq(testControlGroupId1);",
													"  pm.expect(responseJson.name).to.equal(testControlGroupName1);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson.id).to.be.a(\"number\");",
													"  pm.expect(responseJson.name).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-group/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-group",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 60701457,\n  \"name\": \"anim deserunt\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "control Groups query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  const responseJson = pm.response.json();",
											"  const controlGroupId = parseInt(pm.variables.get(\"testControlGroupId1\"));",
											"  const controlGroupName = pm.variables.get(\"testControlGroupName1\");",
											"",
											"",
											"pm.test(\"Response have correct control group\", () => {",
											"    pm.expect(responseJson.some(item => item.id === controlGroupId && item.name === controlGroupName ), 'control group not in array').to.be.true;",
											"})",
											"",
											"pm.test(\"Response have correct fields\", () => {",
											"  responseJson.forEach(item => {",
											"      pm.expect(item).to.have.keys(",
											"        \"id\",",
											"        \"name\",",
											"        \"adminGroupId\"",
											"    )})",
											"});",
											"",
											"",
											"pm.test(\"Response have correct types\", () => {",
											"  pm.expect(responseJson).to.be.a(\"array\");",
											"  pm.expect(responseJson[0].id).to.be.a(\"number\");",
											"  pm.expect(responseJson[0].name).to.be.a(\"string\");",
											"});",
											"",
											"/*",
											"pm.test(\"Response have correct length\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson.length).to.be.eql(1);",
											"});",
											"*/",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/control-groups?limit={{limit}}&offset={{offset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"control-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups?limit=-14922698&offset=-14922698",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups"
											],
											"query": [
												{
													"key": "limit",
													"value": "-14922698"
												},
												{
													"key": "offset",
													"value": "-14922698"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": -1221804,\n    \"name\": \"cillum dolor cupidatat et\"\n  },\n  {\n    \"id\": -90579903,\n    \"name\": \"dolor labore incididunt deserunt\"\n  }\n]"
								}
							]
						},
						{
							"name": "create Control Group mutation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response have correct control group\", () => {",
											"  const responseJson = pm.response.json();",
											"  const createdControlGroupName = pm.variables.get(\"createdControlGroupName\");",
											"",
											"  pm.expect(responseJson.id).to.exist",
											"  pm.expect(responseJson.name).to.equal(createdControlGroupName);",
											"});",
											"",
											"pm.test(\"Response have correct types\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson.id).to.be.a(\"number\");",
											"  pm.expect(responseJson.name).to.be.a(\"string\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"adminGroupId\": {{testAdminGroupId1}},\n    \"name\": \"{{createdControlGroupName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/control-groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"control-groups"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"minim qui\",\n  \"adminGroupId\": 36711267\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 60701457,\n  \"name\": \"anim deserunt\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "devices",
					"item": [
						{
							"name": "{serial No}",
							"item": [
								{
									"name": "device query Zappi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const zappiSerialNo = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"    pm.expect(responseJson).to.have.keys('serialNo','deviceClass','postalCode')",
													"})",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"object\");",
													"  pm.expect(responseJson.serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson.deviceClass).to.be.a(\"string\");",
													"  pm.expect(responseJson.postalCode).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Response have correct devices\", () => {",
													"  pm.expect(responseJson.serialNo).to.eq(zappiSerialNo);",
													"  pm.expect(responseJson.deviceClass).to.equal('Zappi');",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"serialNo\": -23384633.015565634,\n  \"deviceClass\": \"minim et commodo elit\",\n  \"productCode\": 4086327.6509557366\n}"
										}
									]
								},
								{
									"name": "device query Eddi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const eddiSerialNo = parseInt(pm.variables.get(\"testEddiSNO\"));",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"      pm.expect(responseJson).to.have.keys('serialNo','deviceClass', 'postalCode')",
													"})",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"object\");",
													"  pm.expect(responseJson.serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson.deviceClass).to.be.a(\"string\");",
													"  pm.expect(responseJson.postalCode).to.be.a(\"string\");",
													"});",
													"",
													"pm.test(\"Response have correct devices\", () => {",
													"  pm.expect(responseJson.serialNo).to.eq(eddiSerialNo);",
													"  pm.expect(responseJson.deviceClass).to.equal('Eddi');",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testEddiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"serialNo\": -23384633.015565634,\n  \"deviceClass\": \"minim et commodo elit\",\n  \"productCode\": 4086327.6509557366\n}"
										}
									]
								},
								{
									"name": "device Control Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testControlGroupId1 = parseInt(pm.variables.get(\"testControlGroupId1\"));",
													"  const testControlGroupName1 = pm.variables.get(\"testControlGroupName1\");",
													"",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys('id','name', 'adminGroupId')",
													"  });",
													"})",
													"",
													"pm.test(\"Verify serialNo is in response\", () => {",
													"   pm.expect(responseJson.some(item => item.id === testControlGroupId1 && item.name === testControlGroupName1), 'serialno not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson[0].id).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].name).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/control-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"control-groups"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo/control-group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo",
														"control-group"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 60701457,\n  \"name\": \"anim deserunt\"\n}"
										}
									]
								},
								{
									"name": "device Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testEddiSNO = parseInt(pm.variables.get(\"testEddiSNO\"));",
													"",
													"",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"      pm.expect(responseJson).to.have.keys('serialNo','frequency','voltage','deviceClass', 'chargeEnergy', 'updateDate', 'isAvailable')",
													"})",
													"",
													"",
													"pm.test(\"Response have correct device status\", () => {",
													"  pm.expect(responseJson.serialNo).to.eq(testEddiSNO);",
													"  pm.expect(responseJson.deviceClass).to.eq('Eddi');",
													"  pm.expect(responseJson.frequency).to.exist;",
													"  pm.expect(responseJson.chargeEnergy).to.exist;",
													"  pm.expect(responseJson.updateDate).to.exist;",
													"  pm.expect(responseJson.isAvailable).to.exist;",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson.serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson.frequency).to.be.a(\"number\");",
													"  pm.expect(responseJson.chargeEnergy).to.be.a(\"number\");",
													"  pm.expect(responseJson.updateDate).to.be.a(\"string\");",
													"  pm.expect(responseJson.isAvailable).to.be.a(\"boolean\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"status"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testEddiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo",
														"status"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"serialNo\": 29253644.73804933,\n  \"updateDate\": {},\n  \"isAvailable\": true,\n  \"voltage\": -99435226,\n  \"frequency\": -55294993,\n  \"chargeEnergy\": -70373990\n}"
										}
									]
								},
								{
									"name": "device History query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testZappiSNO = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"",
													"pm.test(\"Verify serialNo is in response\", () => {",
													"    pm.expect(responseJson.some(item => item.serialNo === testZappiSNO && item.frequency ===5001), 'serialno not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"serialNo\",",
													"        \"importPower\",",
													"        \"exportPower\",",
													"        \"externalCtPositivePower1\",",
													"        \"externalCtPositivePower2\",",
													"        \"externalCtPositivePower3\",",
													"        \"externalCtNegativePower1\",",
													"        \"externalCtNegativePower2\",",
													"        \"externalCtNegativePower3\",",
													"        \"divertedLoadPower1\",",
													"        \"divertedLoadPower2\",",
													"        \"divertedLoadPower3\",",
													"        \"boostLoadPower1\",",
													"        \"boostLoadPower2\",",
													"        \"boostLoadPower3\",",
													"        \"voltage1\",",
													"        \"voltage2\",",
													"        \"voltage3\",",
													"        \"frequency\",",
													"        \"timestamp\")",
													"  });",
													"  });",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].importPower).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].voltage1).to.be.a(\"number\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/history?startDate={{startDate}}&endDate={{endDate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"history"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "{{startDate}}",
													"description": "(Required) "
												},
												{
													"key": "endDate",
													"value": "{{endDate}}",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo/history?limit=-14922698&offset=-14922698&value=reference %23/components/schemas/DateTime not found in the OpenAPI spec&value=reference %23/components/schemas/DateTime not found in the OpenAPI spec",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo",
														"history"
													],
													"query": [
														{
															"key": "limit",
															"value": "-14922698"
														},
														{
															"key": "offset",
															"value": "-14922698"
														},
														{
															"key": "value",
															"value": "reference #/components/schemas/DateTime not found in the OpenAPI spec"
														},
														{
															"key": "value",
															"value": "reference #/components/schemas/DateTime not found in the OpenAPI spec"
														}
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": 17761902.82171175,\n    \"timestamp\": {},\n    \"importPower\": -69758629.43153466,\n    \"exportPower\": -32079667.088526025,\n    \"externalCtPositivePower1\": -78035354.04896982,\n    \"externalCtPositivePower2\": 79213111.08749527,\n    \"externalCtPositivePower3\": 24047528.95496434,\n    \"externalCtNegativePower1\": 23092603.96238178,\n    \"externalCtNegativePower2\": 92172492.88118136,\n    \"externalCtNegativePower3\": 13859068.646638304,\n    \"divertedLoadPower1\": -32493530.54895833,\n    \"divertedLoadPower2\": 94372606.09276024,\n    \"divertedLoadPower3\": -61539416.358620346,\n    \"boostLoadPower1\": -68763413.45152594,\n    \"boostLoadPower2\": -82156366.55395539,\n    \"boostLoadPower3\": -46148110.36138766,\n    \"voltage1\": 43592435.79749346,\n    \"voltage2\": 1255151.3056740016,\n    \"voltage3\": 48921524.60150975,\n    \"frequency\": -86525779.56040254\n  },\n  {\n    \"serialNo\": 75599141.36149111,\n    \"timestamp\": {},\n    \"importPower\": -69671842.00544083,\n    \"exportPower\": 9855096.634421125,\n    \"externalCtPositivePower1\": -66864745.21279964,\n    \"externalCtPositivePower2\": 48703975.309931874,\n    \"externalCtPositivePower3\": -50402235.173341215,\n    \"externalCtNegativePower1\": -93625894.13852516,\n    \"externalCtNegativePower2\": -49594988.095538154,\n    \"externalCtNegativePower3\": -46319082.76203793,\n    \"divertedLoadPower1\": 38502623.95989102,\n    \"divertedLoadPower2\": -88001254.89631152,\n    \"divertedLoadPower3\": 84922339.26484212,\n    \"boostLoadPower1\": -58466984.11637856,\n    \"boostLoadPower2\": -23521948.073517025,\n    \"boostLoadPower3\": -65182188.828003526,\n    \"voltage1\": -93631802.61292978,\n    \"voltage2\": -53447394.074847445,\n    \"voltage3\": 4842302.904382035,\n    \"frequency\": 99312706.72384009\n  }\n]"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "devices query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"const testEddiSNO = parseInt(pm.variables.get(\"testEddiSNO\"));",
											"",
											"pm.test(\"Response have correct fields\", () => {",
											"  responseJson.forEach(item => {",
											"      pm.expect(item).to.have.keys('serialNo','deviceClass', 'postalCode')",
											"  });",
											"})",
											"",
											"pm.test(\"Verify serialNo is in response\", () => {",
											"   pm.expect(responseJson.some(item => item.serialNo === testEddiSNO), 'serialno not in array').to.be.true;",
											"})",
											"",
											"pm.test(\"Response have correct types\", () => {",
											"  pm.expect(responseJson).to.be.a(\"array\");",
											"  pm.expect(responseJson[0].serialNo).to.be.a(\"number\");",
											"  pm.expect(responseJson[0].deviceClass).to.be.a(\"string\");",
											"  pm.expect(responseJson[0].postalCode).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Response have correct length\", () => {",
											"  const limit = parseInt(pm.variables.get(\"limit\"));",
											"  pm.expect(responseJson.length).to.be.lessThan(limit+1);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/devices?limit={{limit}}&offset={{offset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"devices"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/devices?limit=-14922698&offset=-14922698",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices"
											],
											"query": [
												{
													"key": "limit",
													"value": "-14922698"
												},
												{
													"key": "offset",
													"value": "-14922698"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "admin-groups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "admin Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response have correct admin group\", () => {",
													"  const responseJson = pm.response.json();",
													"  const testAdminGroupId1 = parseInt(pm.variables.get(\"testAdminGroupId1\"));",
													"  const testAdminGroupName1 = pm.variables.get(\"testAdminGroupName1\");",
													"",
													"  pm.expect(responseJson.id).to.eq(testAdminGroupId1);",
													"  pm.expect(responseJson.name).to.equal(testAdminGroupName1);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson.id).to.be.a(\"number\");",
													"  pm.expect(responseJson.name).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/admin-group/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin-group",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 76438997,\n  \"name\": \"non inci\"\n}"
										}
									]
								},
								{
									"name": "admin Group Devices query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testEddiSNO = parseInt(pm.variables.get(\"testEddiSNO\"));",
													"  const testZappiSNO = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"pm.test(\"Verify Zappi is in response\", () => {",
													"    pm.expect(responseJson.some(item => item.serialNo === testZappiSNO && item.deviceClass ==='Zappi'), 'serialno not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Verify Eddi is in response\", () => {",
													"    pm.expect(responseJson.some(item => item.serialNo === testEddiSNO && item.deviceClass ==='Eddi'), 'serialno not in array').to.be.true;",
													"})",
													"",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys('serialNo','deviceClass', 'postalCode')",
													"  });",
													"})",
													"",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].deviceClass).to.be.a(\"string\");",
													"    pm.expect(responseJson[0].postalCode).to.be.a(\"string\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"devices"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/admin-group-devices?id=-14922698",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin-group-devices"
													],
													"query": [
														{
															"key": "id",
															"value": "-14922698"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "admin Group Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const testEddiSNO = parseInt(pm.variables.get(\"testEddiSNO\"));",
													"  const testZappiSNO = parseInt(pm.variables.get(\"testZappiSNO\"));",
													"",
													"",
													"pm.test(\"Response have correct EDDI\", () => {",
													"    pm.expect(responseJson.some(item => ",
													"    item.serialNo === testEddiSNO ",
													"    && item.deviceClass ==='Eddi'",
													"    && item.voltage ===null",
													"    && item.chargeEnergy ===0",
													"    && item.frequency ===5002",
													"    && item.isAvailable ===true",
													"    ), 'device not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct Zappi\", () => {",
													"    pm.expect(responseJson.some(item => ",
													"    item.serialNo === testZappiSNO ",
													"    && item.deviceClass ==='Zappi'",
													"    && item.voltage ===0",
													"    && item.chargeEnergy ===0",
													"    && item.frequency ===4999",
													"    && item.isAvailable ===true",
													"    ), 'device not in array').to.be.true;",
													"})",
													"  ",
													"pm.test(\"Response have correct fields\", () => {",
													"      responseJson.forEach(item => {",
													"        pm.expect(item).to.have.keys('serialNo','frequency','voltage','deviceClass', 'chargeEnergy', 'updateDate', 'isAvailable')",
													"      })",
													"})",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].serialNo).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].deviceClass).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].frequency).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].chargeEnergy).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].isAvailable).to.be.a(\"boolean\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/status/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"status",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/admin-group-status?id=-14922698",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin-group-status"
													],
													"query": [
														{
															"key": "id",
															"value": "-14922698"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -26283266.67089151,\n    \"updateDate\": {},\n    \"isAvailable\": false,\n    \"voltage\": 49122635,\n    \"frequency\": -17924141,\n    \"chargeEnergy\": -74837419\n  },\n  {\n    \"serialNo\": 78909740.10261539,\n    \"updateDate\": {},\n    \"isAvailable\": false,\n    \"voltage\": -1911192,\n    \"frequency\": -4642018,\n    \"chargeEnergy\": 27455853\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "admin Groups query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  const responseJson = pm.response.json();",
											"  const adminGroupId = parseInt(pm.variables.get(\"testAdminGroupId1\"));",
											"  const adminGroupName = pm.variables.get(\"testAdminGroupName1\");",
											"  const testAdminGroupId2 = parseInt(pm.variables.get(\"testAdminGroupId2\"));",
											"  const testAdminGroupName2 = pm.variables.get(\"testAdminGroupName2\");",
											"",
											"pm.test(\"Response have correct admin Group\", () => {",
											"    pm.expect(responseJson.some(item => item.id === adminGroupId && item.name === adminGroupName ), 'control group not in array').to.be.true;",
											"})",
											"",
											"pm.test(\"Response have correct fields\", () => {",
											"  responseJson.forEach(item => {",
											"      pm.expect(item).to.have.keys(",
											"        \"id\",",
											"        \"name\",",
											"    )})",
											"});",
											"",
											"pm.test(\"Response have correct types\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.a(\"array\");",
											"  pm.expect(responseJson[0].id).to.be.a(\"number\");",
											"  pm.expect(responseJson[0].name).to.be.a(\"string\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/admin-groups?limit={{limit}}&offset={{offset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Example",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups?limit=-14922698&offset=-14922698",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups"
											],
											"query": [
												{
													"key": "limit",
													"value": "-14922698"
												},
												{
													"key": "offset",
													"value": "-14922698"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": 85166407,\n    \"name\": \"ut anim\"\n  },\n  {\n    \"id\": -40268295,\n    \"name\": \"dolore ipsum cupidatat ut veniam\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "commands",
					"item": [
						{
							"name": "set frequency",
							"item": [
								{
									"name": "admin Group Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = null",
													"  const error = null",
													"",
													"",
													"pm.test(\"Response have correct response\", () => {",
													"    pm.expect(responseJson.some((item) => ",
													"        item.id === commandId && ",
													"        Date.parse(item.commandInitiated) >= Date.parse(currentTime) &&",
													"        item.csn === csn && ",
													"        item.error === error ",
													"     ), 'correct command response not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"id\",",
													"        \"commandInitiated\",",
													"        \"csn\",",
													"        \"error\"",
													"    )})",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].id).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].csn).to.be.null",
													"  pm.expect(responseJson[0].error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = null",
													"  const error = null",
													"",
													"pm.test(\"Response have correct response\", () => {",
													"    pm.expect(responseJson.some((item) => ",
													"        item.id === commandId && ",
													"        Date.parse(item.commandInitiated) >= Date.parse(currentTime) &&",
													"        item.csn === csn && ",
													"        item.error === error ",
													"     ), 'correct command response not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"id\",",
													"        \"commandInitiated\",",
													"        \"csn\",",
													"        \"error\"",
													"    )})",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].id).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].csn).to.be.null",
													"  pm.expect(responseJson[0].error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = null",
													"  const error = null",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"    pm.expect(responseJson).to.have.keys('id','commandInitiated','csn', 'error')",
													"})",
													"",
													"pm.test(\"Response have correct devices\", () => {",
													"    pm.expect(responseJson.id).to.eq(commandId);",
													"    pm.expect(Date.parse(responseJson.commandInitiated)).to.gte(Date.parse(currentTime));",
													"    pm.expect(responseJson.csn).to.eq(csn);",
													"    pm.expect(responseJson.error).to.eq(error);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an(\"object\");",
													"  pm.expect(responseJson.id).to.be.a(\"string\");",
													"  pm.expect(responseJson.commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson.csn).to.be.null",
													"  pm.expect(responseJson.error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "set load",
							"item": [
								{
									"name": "admin Group Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = 1",
													"  const error = null",
													"",
													"",
													"pm.test(\"Response have correct response\", () => {",
													"    pm.expect(responseJson.some((item) => ",
													"        item.id === commandId && ",
													"        Date.parse(item.commandInitiated) >= Date.parse(currentTime) &&",
													"        item.csn === csn && ",
													"        item.error === error ",
													"     ), 'correct command response not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"id\",",
													"        \"commandInitiated\",",
													"        \"csn\",",
													"        \"error\"",
													"    )})",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].id).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].csn).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = 1",
													"  const error = null",
													"",
													"pm.test(\"Response have correct response\", () => {",
													"    pm.expect(responseJson.some((item) => ",
													"        item.id === commandId && ",
													"        Date.parse(item.commandInitiated) >= Date.parse(currentTime) &&",
													"        item.csn === csn && ",
													"        item.error === error ",
													"     ), 'correct command response not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"id\",",
													"        \"commandInitiated\",",
													"        \"csn\",",
													"        \"error\"",
													"    )})",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].id).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].csn).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = 1",
													"  const error = null",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"    pm.expect(responseJson).to.have.keys('id','commandInitiated','csn', 'error')",
													"})",
													"",
													"pm.test(\"Response have correct devices\", () => {",
													"    pm.expect(responseJson.id).to.eq(commandId);",
													"    pm.expect(Date.parse(responseJson.commandInitiated)).to.lte(Date.parse(currentTime));",
													"    pm.expect(responseJson.csn).to.eq(csn);",
													"    pm.expect(responseJson.error).to.eq(error);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an(\"object\");",
													"  pm.expect(responseJson.id).to.be.a(\"string\");",
													"  pm.expect(responseJson.commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson.csn).to.be.a(\"number\");",
													"  pm.expect(responseJson.error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clear command",
							"item": [
								{
									"name": "device clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = 1",
													"  const error = null",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"    pm.expect(responseJson).to.have.keys('id','commandInitiated','csn', 'error')",
													"})",
													"",
													"pm.test(\"Response have correct devices\", () => {",
													"    pm.expect(responseJson.id).to.eq(commandId);",
													"    pm.expect(Date.parse(responseJson.commandInitiated)).to.gte(Date.parse(currentTime));",
													"    pm.expect(responseJson.csn).to.eq(csn);",
													"    pm.expect(responseJson.error).to.eq(error);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an(\"object\");",
													"  pm.expect(responseJson.id).to.be.a(\"string\");",
													"  pm.expect(responseJson.commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson.csn).to.be.a(\"number\");",
													"  pm.expect(responseJson.error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = 1",
													"  const error = null",
													"",
													"pm.test(\"Response have correct response\", () => {",
													"    pm.expect(responseJson.some((item) => ",
													"        item.id === commandId && ",
													"        Date.parse(item.commandInitiated) >= Date.parse(currentTime) &&",
													"        item.csn === csn && ",
													"        item.error === error ",
													"     ), 'correct command response not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"id\",",
													"        \"commandInitiated\",",
													"        \"csn\",",
													"        \"error\"",
													"    )})",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].id).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].csn).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin Group clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"  const responseJson = pm.response.json();",
													"  const commandId = \"test-id\"",
													"  const currentTime = new Date().toUTCString()",
													"  const csn = 1",
													"  const error = null",
													"",
													"",
													"pm.test(\"Response have correct response\", () => {",
													"    pm.expect(responseJson.some((item) => ",
													"        item.id === commandId && ",
													"        Date.parse(item.commandInitiated) >= Date.parse(currentTime) &&",
													"        item.csn === csn && ",
													"        item.error === error ",
													"     ), 'correct command response not in array').to.be.true;",
													"})",
													"",
													"pm.test(\"Response have correct fields\", () => {",
													"  responseJson.forEach(item => {",
													"      pm.expect(item).to.have.keys(",
													"        \"id\",",
													"        \"commandInitiated\",",
													"        \"csn\",",
													"        \"error\"",
													"    )})",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.a(\"array\");",
													"  pm.expect(responseJson[0].id).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].commandInitiated).to.be.a(\"string\");",
													"  pm.expect(responseJson[0].csn).to.be.a(\"number\");",
													"  pm.expect(responseJson[0].error).to.be.null",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJ0ZXN0QXBwQ2xpZW50SWQtMSJ9.WzYwnlT7U6MASj4Bvr4jO3t5oy-FLY3vo5716hqxqv4",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"testAdminGroupId1\", 1)",
							"pm.collectionVariables.set(\"testAdminGroupId2\", 2)",
							"pm.collectionVariables.set(\"testAdminGroupName1\", \"testAdminGroup-1\")",
							"pm.collectionVariables.set(\"testAdminGroupName2\", \"testAdminGroup-2\")",
							"pm.collectionVariables.set(\"testControlGroupId1\", 1)",
							"pm.collectionVariables.set(\"testControlGroupId2\", 2)",
							"pm.collectionVariables.set(\"testControlGroupName1\", \"testControlGroup\")",
							"pm.collectionVariables.set(\"testControlGroupName2\", \"testControlGroup-2\")",
							"pm.collectionVariables.set(\"createdZappiSNO\", 100000002)",
							"pm.collectionVariables.set(\"createdEddiSNO\", 200000002)",
							"pm.collectionVariables.set(\"createdZappiSNO2\", 100000003)",
							"pm.collectionVariables.set(\"createdEddiSNO2\", 200000003)",
							"pm.collectionVariables.set(\"testZappiSNO\", 100000001)",
							"pm.collectionVariables.set(\"testEddiSNO\", 200000001)",
							"pm.collectionVariables.set(\"testEddiSNO\", 200000001)",
							"pm.collectionVariables.set(\"aggregatorId\", \"testAppClientId-1\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is correct\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Response time is less than allowed\", () => {",
							"  const maxResponseTime = parseInt(pm.variables.get(\"maxResponseTime\"));",
							"  pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "api-unauthorized",
			"item": [
				{
					"name": "control-groups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "control Group Devices query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"devices"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group History query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"type": "text"
												},
												{
													"key": "startDate",
													"value": "2017-01-01T00:00:00.000Z",
													"type": "text",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2022-05-01T00:00:00.000Z",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/history?startDate={{startDate}}&endDate={{endDate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"history"
											],
											"query": [
												{
													"key": "startDate",
													"value": "{{startDate}}"
												},
												{
													"key": "endDate",
													"value": "{{endDate}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "add Device To Control Group mutation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{testControlGroupId2}},\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"add-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Device From Control Group mutation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{testControlGroupId2}},\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/remove-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"remove-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "control Groups query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/control-groups?limit={{limit}}&offset={{offset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"control-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create Control Group mutation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"adminGroupId\": {{testAdminGroupId1}},\n    \"name\": \"{{createdControlGroupName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/control-groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"control-groups"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "devices",
					"item": [
						{
							"name": "{serial No}",
							"item": [
								{
									"name": "device query Zappi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device query Eddi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testEddiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Control Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/control-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"control-groups"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"status"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testEddiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device History query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/history?startDate={{startDate}}&endDate={{endDate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"history"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"disabled": true
												},
												{
													"key": "startDate",
													"value": "{{startDate}}",
													"description": "(Required) "
												},
												{
													"key": "endDate",
													"value": "{{endDate}}",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "devices query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/devices?limit={{limit}}&offset={{offset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"devices"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin-groups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "admin Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin Group Devices query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"devices"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin Group Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/status/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"status",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "admin Groups query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/admin-groups?limit={{limit}}&offset={{offset}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{limit}}"
										},
										{
											"key": "offset",
											"value": "{{offset}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "commands",
					"item": [
						{
							"name": "set frequency",
							"item": [
								{
									"name": "admin Group Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "set load",
							"item": [
								{
									"name": "admin Group Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clear command",
							"item": [
								{
									"name": "device clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin Group clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"testControlGroupId1\", 1)",
							"pm.collectionVariables.set(\"testControlGroupId2\", 2)",
							"pm.collectionVariables.set(\"testAdminGroupId1\", 1)",
							"pm.collectionVariables.set(\"testAdminGroupId2\", 2)",
							"pm.collectionVariables.set(\"testAdminGroupName1\", \"testAdminGroup-1\")",
							"pm.collectionVariables.set(\"testAdminGroupName2\", \"testAdminGroup-2\")",
							"pm.collectionVariables.set(\"createdZappiSNO\", 100000002)",
							"pm.collectionVariables.set(\"createdEddiSNO\", 200000002)",
							"pm.collectionVariables.set(\"createdZappiSNO2\", 100000003)",
							"pm.collectionVariables.set(\"createdEddiSNO2\", 200000003)",
							"pm.collectionVariables.set(\"testZappiSNO\", 100000001)",
							"pm.collectionVariables.set(\"testEddiSNO\", 200000001)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const responseJson = pm.response.json();",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     pm.response.to.be.not.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Status code is 401\", () => {",
							"  pm.expect(pm.response.code).to.eql(401);",
							"});",
							"",
							"pm.test(\"Response have correct field\", () => {",
							"    pm.expect(responseJson).to.have.keys('message')",
							"})",
							"",
							"pm.test(\"Response have correct type\", () => {",
							"  pm.expect(responseJson).to.be.a(\"object\");",
							"  pm.expect(responseJson.message).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response have correct devices\", () => {",
							"  pm.expect(responseJson.message).to.eq(\"Access denied! You don't have permission for this action!\");",
							"});",
							"",
							"pm.test(\"Content-Type header is correct\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Response time is less than allowed\", () => {",
							"  const maxResponseTime = parseInt(pm.variables.get(\"maxResponseTime\"));",
							"  pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "api-notFound",
			"item": [
				{
					"name": "control-groups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "control Group Devices query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/devices",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"devices"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/devices",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"devices"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "control Group Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"status"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "control Group History query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"type": "text"
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"type": "text"
												},
												{
													"key": "startDate",
													"value": "2017-01-01T00:00:00.000Z",
													"type": "text",
													"disabled": true
												},
												{
													"key": "endDate",
													"value": "2022-05-01T00:00:00.000Z",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/history?startDate={{startDate}}&endDate={{endDate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"history"
											],
											"query": [
												{
													"key": "startDate",
													"value": "{{startDate}}"
												},
												{
													"key": "endDate",
													"value": "{{endDate}}"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/history",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"history"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -78158225.83167362,\n    \"deviceClass\": \"in co\",\n    \"productCode\": 55553000.40547079\n  },\n  {\n    \"serialNo\": 54208807.006628126,\n    \"deviceClass\": \"consequat et Lorem Ut\",\n    \"productCode\": -22364794.02003075\n  }\n]"
										}
									]
								},
								{
									"name": "add-Missing-Devices-To-Control-Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"testControlGroupId1\", 1)\r",
													"pm.collectionVariables.set(\"createdZappiSNO\", 99999999)\r",
													"pm.collectionVariables.set(\"createdEddiSNO\", 99999999)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"add-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 1,\n  \"serialNos\": [\n    111111,\n    222222\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"add-device"
													],
													"variable": [
														{
															"key": "id",
															"value": null
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
										}
									]
								},
								{
									"name": "remove Device From Control Group mutation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": {{testControlGroupId2}},\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/remove-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"remove-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 1,\n  \"serialNos\": [\n    111111,\n    222222\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/remove-device",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"remove-device"
													],
													"variable": [
														{
															"key": "id",
															"value": null
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
										}
									]
								},
								{
									"name": "control Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/control-group/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-group",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 60701457,\n  \"name\": \"anim deserunt\"\n}"
										}
									]
								},
								{
									"name": "add-Device-To-Non-Existent-Control-Group Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"testControlGroupId1\", 9999999)\r",
													"pm.collectionVariables.set(\"createdZappiSNO\", 100000001)\r",
													"pm.collectionVariables.set(\"createdEddiSNO\", 200000001)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serialNos\": [\n    {{createdZappiSNO}},\n    {{createdEddiSNO}}\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"add-device"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": 1,\n  \"serialNos\": [\n    111111,\n    222222\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/control-groups/:id/add-device",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"control-groups",
														":id",
														"add-device"
													],
													"variable": [
														{
															"key": "id",
															"value": null
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.eql(404);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "devices",
					"item": [
						{
							"name": "{serial No}",
							"item": [
								{
									"name": "device query Zappi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"serialNo\": -23384633.015565634,\n  \"deviceClass\": \"minim et commodo elit\",\n  \"productCode\": 4086327.6509557366\n}"
										}
									]
								},
								{
									"name": "device query Eddi",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testEddiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"serialNo\": -23384633.015565634,\n  \"deviceClass\": \"minim et commodo elit\",\n  \"productCode\": 4086327.6509557366\n}"
										}
									]
								},
								{
									"name": "device Control Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/control-groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"control-groups"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo/control-group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo",
														"control-group"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 60701457,\n  \"name\": \"anim deserunt\"\n}"
										}
									]
								},
								{
									"name": "device Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"status"
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testEddiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo",
														"status"
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"serialNo\": 29253644.73804933,\n  \"updateDate\": {},\n  \"isAvailable\": true,\n  \"voltage\": -99435226,\n  \"frequency\": -55294993,\n  \"chargeEnergy\": -70373990\n}"
										}
									]
								},
								{
									"name": "device History query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "serialNo",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:serialNo/history?startDate={{startDate}}&endDate={{endDate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":serialNo",
												"history"
											],
											"query": [
												{
													"key": "startDate",
													"value": "{{startDate}}",
													"description": "(Required) "
												},
												{
													"key": "endDate",
													"value": "{{endDate}}",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "serialNo",
													"value": "{{testZappiSNO}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/devices/:serialNo/history?limit=-14922698&offset=-14922698&value=reference %23/components/schemas/DateTime not found in the OpenAPI spec&value=reference %23/components/schemas/DateTime not found in the OpenAPI spec",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"devices",
														":serialNo",
														"history"
													],
													"query": [
														{
															"key": "limit",
															"value": "-14922698"
														},
														{
															"key": "offset",
															"value": "-14922698"
														},
														{
															"key": "value",
															"value": "reference #/components/schemas/DateTime not found in the OpenAPI spec"
														},
														{
															"key": "value",
															"value": "reference #/components/schemas/DateTime not found in the OpenAPI spec"
														}
													],
													"variable": [
														{
															"key": "serialNo",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": 17761902.82171175,\n    \"timestamp\": {},\n    \"importPower\": -69758629.43153466,\n    \"exportPower\": -32079667.088526025,\n    \"externalCtPositivePower1\": -78035354.04896982,\n    \"externalCtPositivePower2\": 79213111.08749527,\n    \"externalCtPositivePower3\": 24047528.95496434,\n    \"externalCtNegativePower1\": 23092603.96238178,\n    \"externalCtNegativePower2\": 92172492.88118136,\n    \"externalCtNegativePower3\": 13859068.646638304,\n    \"divertedLoadPower1\": -32493530.54895833,\n    \"divertedLoadPower2\": 94372606.09276024,\n    \"divertedLoadPower3\": -61539416.358620346,\n    \"boostLoadPower1\": -68763413.45152594,\n    \"boostLoadPower2\": -82156366.55395539,\n    \"boostLoadPower3\": -46148110.36138766,\n    \"voltage1\": 43592435.79749346,\n    \"voltage2\": 1255151.3056740016,\n    \"voltage3\": 48921524.60150975,\n    \"frequency\": -86525779.56040254\n  },\n  {\n    \"serialNo\": 75599141.36149111,\n    \"timestamp\": {},\n    \"importPower\": -69671842.00544083,\n    \"exportPower\": 9855096.634421125,\n    \"externalCtPositivePower1\": -66864745.21279964,\n    \"externalCtPositivePower2\": 48703975.309931874,\n    \"externalCtPositivePower3\": -50402235.173341215,\n    \"externalCtNegativePower1\": -93625894.13852516,\n    \"externalCtNegativePower2\": -49594988.095538154,\n    \"externalCtNegativePower3\": -46319082.76203793,\n    \"divertedLoadPower1\": 38502623.95989102,\n    \"divertedLoadPower2\": -88001254.89631152,\n    \"divertedLoadPower3\": 84922339.26484212,\n    \"boostLoadPower1\": -58466984.11637856,\n    \"boostLoadPower2\": -23521948.073517025,\n    \"boostLoadPower3\": -65182188.828003526,\n    \"voltage1\": -93631802.61292978,\n    \"voltage2\": -53447394.074847445,\n    \"voltage3\": 4842302.904382035,\n    \"frequency\": 99312706.72384009\n  }\n]"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.eql(404);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "admin-groups",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "admin Group query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const testAdminGroupId1 = parseInt(pm.variables.get(\"testAdminGroupId1\"));",
													"",
													"pm.test(\"Response have correct admin group id\", () => {",
													"  pm.expect(responseJson.message).to.contain(testAdminGroupId1);",
													"});",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson.message).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/admin-group/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin-group",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-14922698",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 76438997,\n  \"name\": \"non inci\"\n}"
										}
									]
								},
								{
									"name": "admin Group Status query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Response have correct types\", () => {",
													"  pm.expect(responseJson.message).to.be.a(\"string\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{testAdminGroupId1}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"status"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "Untitled Example",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/admin-group-status?id=-14922698",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"admin-group-status"
													],
													"query": [
														{
															"key": "id",
															"value": "-14922698"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"serialNo\": -26283266.67089151,\n    \"updateDate\": {},\n    \"isAvailable\": false,\n    \"voltage\": 49122635,\n    \"frequency\": -17924141,\n    \"chargeEnergy\": -74837419\n  },\n  {\n    \"serialNo\": 78909740.10261539,\n    \"updateDate\": {},\n    \"isAvailable\": false,\n    \"voltage\": -1911192,\n    \"frequency\": -4642018,\n    \"chargeEnergy\": 27455853\n  }\n]"
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "commands",
					"item": [
						{
							"name": "set frequency",
							"item": [
								{
									"name": "admin Group Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Set frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"DAF\": 5000,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/set-frequency",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"set-frequency"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "set load",
							"item": [
								{
									"name": "admin Group Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "device Set Load",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"csn\": 1,\n  \"value\": \"max\",\n  \"ttl\": 100\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/set-load",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"set-load"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "clear command",
							"item": [
								{
									"name": "device clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/devices/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"devices",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testZappiSNO}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "control Group clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/control-groups/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"control-groups",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testControlGroupId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "admin Group clear command",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/admin-groups/:id/clear-command",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin-groups",
												":id",
												"clear-command"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{testAdminGroupId1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJ0ZXN0QXBwQ2xpZW50SWQtMSJ9.WzYwnlT7U6MASj4Bvr4jO3t5oy-FLY3vo5716hqxqv4",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"testControlGroupId1\", 99999999)",
							"pm.collectionVariables.set(\"testAdminGroupId1\", 99999999)",
							"pm.collectionVariables.set(\"testAdminGroupName1\", \"admingroup1\")",
							"pm.collectionVariables.set(\"testAdminGroupName2\", \"admingroup2\")",
							"",
							"pm.collectionVariables.set(\"createdEddiSNO2\", 99999999)",
							"pm.collectionVariables.set(\"createdZappiSNO2\", 99999999)",
							"",
							"pm.collectionVariables.set(\"testZappiSNO\", 99999999)",
							"pm.collectionVariables.set(\"testEddiSNO\", 99999999)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"response must not be ok\", function () {",
							"     pm.response.to.be.not.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Status code is 404\", () => {",
							"  pm.expect(pm.response.code).to.eql(404);",
							"});",
							"",
							"pm.test(\"Content-Type header is correct\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
							"});",
							"",
							"pm.test(\"Response time is less than allowed\", () => {",
							"  const maxResponseTime = parseInt(pm.variables.get(\"maxResponseTime\"));",
							"  pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
							"});",
							"",
							"pm.test(\"Response has a message field for the error\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.keys('message')",
							"    pm.expect(responseJson.message).to.be.a(\"string\");",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "api-commands-wrong-parameters",
			"item": [
				{
					"name": "set frequency",
					"item": [
						{
							"name": "admin Group Set frequency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"DAF\": 1,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin-groups/:id/set-frequency",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin-groups",
										":id",
										"set-frequency"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{testAdminGroupId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "control Group Set frequency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"DAF\": 5100.9,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/control-groups/:id/set-frequency",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"control-groups",
										":id",
										"set-frequency"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{testControlGroupId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "device Set frequency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"DAF\": 5200,\n  \"UAF\": 5000,\n  \"DDF\": 5000,\n  \"UDF\": 5000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/devices/:id/set-frequency",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"devices",
										":id",
										"set-frequency"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{testZappiSNO}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "set load",
					"item": [
						{
							"name": "admin Group Set Load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"csn\": 1,\n  \"value\": \"asd\",\n  \"ttl\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/admin-groups/:id/set-load",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"admin-groups",
										":id",
										"set-load"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{testAdminGroupId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "control Group Set Load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"csn\": 1,\n  \"value\": \"asd\",\n  \"ttl\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/control-groups/:id/set-load",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"control-groups",
										":id",
										"set-load"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{testControlGroupId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "device Set Load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"csn\": 1,\n  \"value\": \"asd\",\n  \"ttl\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/devices/:id/set-load",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"devices",
										":id",
										"set-load"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{testZappiSNO}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRfaWQiOiJ0ZXN0QXBwQ2xpZW50SWQtMSJ9.WzYwnlT7U6MASj4Bvr4jO3t5oy-FLY3vo5716hqxqv4",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 500 or 400\", () => {",
							"  pm.expect(pm.response.code === 500 || pm.response.code === 400).to.be.true",
							"});",
							"",
							"//pm.test(\"Content-Type header is correct\", () => {",
							"//  pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/html; charset=utf-8');",
							"// });",
							"",
							"pm.test(\"Response text contains UserInputError or has error message\", () => {",
							"  pm.expect(pm.response.text().includes('Error') || !!pm.response.json().message).to.be.true",
							"});",
							"",
							"pm.test(\"Response time is less than allowed\", () => {",
							"  const maxResponseTime = parseInt(pm.variables.get(\"maxResponseTime\"));",
							"  pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "api-admin-success",
			"item": [
				{
					"name": "get Admin Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const responseJson = pm.response.json();",
									"  const adminGroupId = parseInt(pm.variables.get(\"testAdminGroupId1\"));",
									"  const adminGroupName = pm.variables.get(\"testAdminGroupName1\");",
									"  const testAdminGroupId2 = parseInt(pm.variables.get(\"testAdminGroupId2\"));",
									"  const testAdminGroupName2 = pm.variables.get(\"testAdminGroupName2\");",
									"",
									"pm.test(\"Response have correct admin Group\", () => {",
									"    pm.expect(responseJson.some(item => item.id === adminGroupId && item.name === adminGroupName ), 'admin group not in array').to.be.true;",
									"})",
									"",
									"pm.test(\"Response have correct fields\", () => {",
									"  responseJson.forEach(item => {",
									"      pm.expect(item).to.have.keys(",
									"        \"id\",",
									"        \"name\",",
									"    )})",
									"});",
									"",
									"pm.test(\"Response have correct types\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.be.a(\"array\");",
									"  pm.expect(responseJson[0].id).to.be.a(\"number\");",
									"  pm.expect(responseJson[0].name).to.be.a(\"string\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adminUrl}}/api/admin-groups",
							"host": [
								"{{adminUrl}}"
							],
							"path": [
								"api",
								"admin-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "add Device To Admin Group mutation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"mutation had correct rows affected\", () => {",
									"  const responseJson = pm.response.json();",
									"",
									"  pm.expect(responseJson.affectedRows).to.eq(2);",
									"});",
									"",
									"pm.test(\"Response have correct types\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.be.a(\"object\");",
									"  pm.expect(responseJson.affectedRows).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{testAdminGroupId1}},\n  \"serialNos\": [\n    {{createdZappiSNO2}},\n    {{createdEddiSNO2}}\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adminUrl}}/api/add-device-to-admin-group",
							"host": [
								"{{adminUrl}}"
							],
							"path": [
								"api",
								"add-device-to-admin-group"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -12770540,\n  \"serialNos\": [\n    17997715,\n    -3229426\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/add-device-to-admin-group",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"add-device-to-admin-group"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
						}
					]
				},
				{
					"name": "remove Device From Admin Group mutation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"mutation had correct rows affected\", () => {",
									"  const responseJson = pm.response.json();",
									"",
									"  pm.expect(responseJson.affectedRows).to.eq(2);",
									"});",
									"",
									"pm.test(\"Response have correct types\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.be.a(\"object\");",
									"  pm.expect(responseJson.affectedRows).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{testAdminGroupId1}},\n  \"serialNos\": [\n    {{createdZappiSNO2}},\n    {{createdEddiSNO2}}\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adminUrl}}/api/remove-device-from-admin-group",
							"host": [
								"{{adminUrl}}"
							],
							"path": [
								"api",
								"remove-device-from-admin-group"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": -12770540,\n  \"serialNos\": [\n    17997715,\n    -3229426\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/remove-device-from-admin-group",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"remove-device-from-admin-group"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"affectedRows\": -20168884.144484118\n}"
						}
					]
				},
				{
					"name": "create Admin Group mutation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const createdAdminGroupName = pm.variables.get(\"createdAdminGroupName\");",
									"",
									"pm.test(\"Response have correct Admin group\", () => {",
									"  pm.expect(responseJson.id).to.exist",
									"  pm.expect(responseJson.name).to.equal(createdAdminGroupName);",
									"});",
									"",
									"pm.test(\"Response have correct types\", () => {",
									"  pm.expect(responseJson.id).to.be.a(\"number\");",
									"  pm.expect(responseJson.name).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{createdAdminGroupName}}\",\n  \"aggregatorId\": {{aggregatorId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{adminUrl}}/api/create-admin-group",
							"host": [
								"{{adminUrl}}"
							],
							"path": [
								"api",
								"create-admin-group"
							]
						}
					},
					"response": [
						{
							"name": "Untitled Example",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"ut exercitation\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/create-admin-group",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"create-admin-group"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 76438997,\n  \"name\": \"non inci\"\n}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlcyI6WyJhZ2dyZWdhdG9yTWFuYWdlbWVudCJdfQ.k49vy0W13Xq5ElW-lB-KY07ITlTYvEvigOY_9V9RDbk",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"aggregatorId\", 1)",
							"pm.collectionVariables.set(\"testAdminGroupId1\", 1)",
							"pm.collectionVariables.set(\"testAdminGroupName1\", \"testAdminGroup-1\")",
							"pm.collectionVariables.set(\"testControlGroupId1\", 1)",
							"pm.collectionVariables.set(\"testZappiSNO\", 100000001)",
							"pm.collectionVariables.set(\"testEddiSNO\", 200000001)",
							"pm.collectionVariables.set(\"testEddiSNO\", 200000001)",
							"pm.collectionVariables.set(\"createdZappiSNO\", 100000002)",
							"pm.collectionVariables.set(\"createdEddiSNO\", 200000002)",
							"pm.collectionVariables.set(\"createdZappiSNO2\", 100000003)",
							"pm.collectionVariables.set(\"createdEddiSNO2\", 200000003)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		},
		{
			"key": "testControlGroupId1",
			"value": "1"
		},
		{
			"key": "testControlGroupName1",
			"value": "testControlGroup"
		},
		{
			"key": "testControlGroupId2",
			"value": "2"
		},
		{
			"key": "testControlGroupName2",
			"value": "testControlGroup2"
		},
		{
			"key": "testAdminGroupId1",
			"value": "1"
		},
		{
			"key": "testAdminGroupName1",
			"value": "testAdminGroup-1"
		},
		{
			"key": "testAdminGroupId2",
			"value": "2"
		},
		{
			"key": "testAdminGroupName2",
			"value": "testAdminGroup-2"
		},
		{
			"key": "maxResponseTime",
			"value": "500"
		},
		{
			"key": "limit",
			"value": "10"
		},
		{
			"key": "offset",
			"value": "0"
		},
		{
			"key": "testZappiSNO",
			"value": "100000001"
		},
		{
			"key": "testEddiSNO",
			"value": "200000001"
		},
		{
			"key": "createdZappiSNO",
			"value": "100000002"
		},
		{
			"key": "createdEddiSNO",
			"value": "200000002"
		},
		{
			"key": "createdControlGroupName",
			"value": "test12345"
		},
		{
			"key": "createdAdminGroupName",
			"value": "test123456"
		},
		{
			"key": "startDate",
			"value": "2020-10-01"
		},
		{
			"key": "endDate",
			"value": "2021-10-01"
		},
		{
			"key": "createdZappiSNO2",
			"value": "100000003"
		},
		{
			"key": "createdEddiSNO2",
			"value": "200000003"
		},
		{
			"key": "aggregatorId",
			"value": "testAppClientId-1"
		}
	]
}

